<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Share`18℃</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://share18.cc/"/>
  <updated>2016-04-29T03:02:39.323Z</updated>
  <id>http://share18.cc/</id>
  
  <author>
    <name>WoeiTsai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础语法三：变量引用思想</title>
    <link href="http://share18.cc/2016/04/29/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%9A%E4%B8%89/"/>
    <id>http://share18.cc/2016/04/29/Python基础语法：三/</id>
    <published>2016-04-29T08:11:54.000Z</published>
    <updated>2016-04-29T03:02:39.323Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在Python并没有什么指针的概念，不同变量的引用都是指向开辟好的内存(注：Python事实上实现了自己的内存分配系统，它在操作系统内存堆上提供了另外一层抽象）。&lt;br&gt;如果你要将a = 1这个变量初始化，那么就会在内存中开辟一块空间给1，接着再将a = 2这个变量初始话，Python并不会把之前的1这个变量内存空间占用，而是会重新开辟一个a = 2的内存空间，那么问题就来了，如果在开辟一个b = 1的变量那么b会指向哪块内存呢？还是新开辟一块内存呢？&lt;br&gt;答案是仍然使用已经开辟好的1内存空间，也就是说1的内存空间被多个变量引用了，这就是Python的变量引用思想，那么我们来用程序验证下最终结果看看。&lt;/p&gt;
&lt;h2 id=&quot;程序验证&quot;&gt;&lt;a href=&quot;#程序验证&quot; class=&quot;headerlink&quot; title=&quot;程序验证&quot;&gt;&lt;/a&gt;程序验证&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;i = 0
n = 3
m = 0
if id(i) &amp;lt;&amp;gt; id(n):
print &amp;apos;i和n的内存地址不相同，i：&amp;apos;,id(i),&amp;apos;n:&amp;apos;,id(n)
if id(i) == id(m):
print &amp;apos;i和m的内存地址相同，i：&amp;apos;,id(i),&amp;apos;m:&amp;apos;,id(m)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;输出结果：&lt;br&gt;i和n的内存地址不相同，i： 44398980 n: 44398944&lt;br&gt;i和m的内存地址相同，i： 44398980 m: 44398980&lt;/p&gt;
&lt;p&gt;由结果可以看出同时为0的i和m的内存地址是一样的，也就是说都指向的一同一块内存，可以这么理解，i和m就像是同一个商品中的标签i标签和m标签，那么我们再来验证下，如果把某个标签撕掉，分配的内存会消失吗？&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;i = 0
n = 3
m = 0
if id(i) &amp;lt;&amp;gt; id(n):
    print &amp;apos;i和n的内存地址不相同，i：&amp;apos;,id(i),&amp;apos;n:&amp;apos;,id(n)
if id(i) == id(m):
    print &amp;apos;i和m的内存地址相同，i：&amp;apos;,id(i),&amp;apos;m:&amp;apos;,id(m)
del i
print &amp;apos;m的内存地址:&amp;apos;,id(m)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：&lt;br&gt;i和n的内存地址不相同，i： 22509956 n: 22509920&lt;br&gt;i和m的内存地址相同，i： 22509956 m: 22509956&lt;br&gt;m的内存地址: 22509956&lt;/p&gt;
&lt;p&gt;可见撕掉m的标签内存还在，不存在消失的情况。&lt;br&gt;那么问题又来的，卧槽什么时候内存会被回收呢？java有回收机制Python有吗？答案是肯定的，只是回收机制不一样罢了。&lt;/p&gt;
&lt;h2 id=&quot;Python的内存回收机制&quot;&gt;&lt;a href=&quot;#Python的内存回收机制&quot; class=&quot;headerlink&quot; title=&quot;Python的内存回收机制&quot;&gt;&lt;/a&gt;Python的内存回收机制&lt;/h2&gt;&lt;p&gt;简单来说python里回收机制是以引用计数为主，标记-清除和分代收集两种机制为辅，下面主要说下计数。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;python里每一个东西都是对象，它们的核心就是一个结构体：PyObject，PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef struct_object {    
    int ob_refcnt;    
    struct_typeobject *ob_type;
}PyObject;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define Py_INCREF(op)   ((op)-&amp;gt;ob_refcnt++)      //增加计数
#define Py_DECREF(op)      \                     //减少计数       
     if (--(op)-&amp;gt;ob_refcnt != 0)    
         ;
     else
         __Py_Dealloc((PyObject *)(op))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;引用计数为0时，该对象生命就结束了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用计数机制的优点 &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;li&gt;实时性：一旦没有引用，内存就直接释放了。不用像其他机制等到特定时机。实时性还带来一个好处：处理回收内存的时间分摊到了平时。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;引用计数机制的缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;维护引用计数消耗资源 &lt;/li&gt;
&lt;li&gt;循环引用 &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Python在科学计算和数据处理中用途广泛，而深入底层那些基础理念和算法，都应该感激那些六七十年代由麦卡锡等计算机先贤所作出的计算机科学开创性研究吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在Python并没有什么指针的概念，不同变量的引用都是指向开辟好的内存(注：Python事实上实现了自己的内存分配系统，它在操作系统内存堆上
    
    </summary>
    
      <category term="Python" scheme="http://share18.cc/categories/Python/"/>
    
    
      <category term="Python" scheme="http://share18.cc/tags/Python/"/>
    
      <category term="代码" scheme="http://share18.cc/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>古典古籍研究：《搜神祕覽-船山藏》</title>
    <link href="http://share18.cc/2016/04/28/%E5%8F%A4%E5%85%B8%E5%8F%A4%E7%B1%8D%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%B8%80/"/>
    <id>http://share18.cc/2016/04/28/古典古籍研究：一/</id>
    <published>2016-04-28T15:11:54.000Z</published>
    <updated>2016-04-28T15:54:06.405Z</updated>
    
    <content type="html">&lt;h2 id=&quot;原文：&quot;&gt;&lt;a href=&quot;#原文：&quot; class=&quot;headerlink&quot; title=&quot;原文：&quot;&gt;&lt;/a&gt;原文：&lt;/h2&gt;&lt;p&gt;五代離亂，兵革紛擾，豪商大賈往往以珍寶委棄深山大澤中，免罹喪亂，不可勝數。綿歷歲月，乃成變怪。今建州浦城縣之船山，一藏是也。山有赤人、赤馬、白人、白馬、牛羊之類，左右羅列，動以千百數，雜陳金寶，長曳數百步，而人未有得之者。山之垠常有字隱隱出於石間，村甿不能辯書者多見。之後有人見而記曰：“船山有一藏，或在南，或在北，有人拾得，富得一國。”至今存焉。胡人過是山，必拜而去。&lt;/p&gt;
&lt;h2 id=&quot;粗略译文：&quot;&gt;&lt;a href=&quot;#粗略译文：&quot; class=&quot;headerlink&quot; title=&quot;粗略译文：&quot;&gt;&lt;/a&gt;粗略译文：&lt;/h2&gt;&lt;p&gt;五代的时候经常出现战争叛乱，战争纷扰，富有的商人往往将珍宝藏在深山大泽中免得珍宝散乱的人不可胜数。经历了一定岁月，珍宝就变成了精怪。现南平市浦城县的船山，有一宝藏。山里面有赤人、赤马、白人、白马、牛羊之类的精怪，左右罗列，数以百计，亲近在珍宝的百步周围，没有人能得到。村里不识字的人在山边常常看得见有字隐藏在石头之间。后来有人看见就记下来了，说：：“船山有一藏，或在南，或在北，有人拾得，富得一國。”到现在这种说法还存在。&lt;em&gt;胡人&lt;/em&gt;过这座山时，都要跪拜了才走。&lt;/p&gt;
&lt;h2 id=&quot;分析：&quot;&gt;&lt;a href=&quot;#分析：&quot; class=&quot;headerlink&quot; title=&quot;分析：&quot;&gt;&lt;/a&gt;分析：&lt;/h2&gt;&lt;p&gt;船山应该指的就是浦城县上同村的船山，唐黄巢起义前，浦城的拓岭古道仍是进福建的主要通道，中原战乱，有人迁居福建是很正常的，所以船山宝藏一说有一定可信度，但古船山和今天的船山位置是否一致比较难判断，依据之前昌平王过船山，有一女儿死在船山，后人把船山的某座山峰称为玉女峰，似乎可以确定大致范围，但山脉太长，如今也是不能具体考证了。&lt;/p&gt;
&lt;h2 id=&quot;船山位置图：&quot;&gt;&lt;a href=&quot;#船山位置图：&quot; class=&quot;headerlink&quot; title=&quot;船山位置图：&quot;&gt;&lt;/a&gt;船山位置图：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xt9j2.com2.z0.glb.clouddn.com/%E8%88%B9%E5%B1%B1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原文：&quot;&gt;&lt;a href=&quot;#原文：&quot; class=&quot;headerlink&quot; title=&quot;原文：&quot;&gt;&lt;/a&gt;原文：&lt;/h2&gt;&lt;p&gt;五代離亂，兵革紛擾，豪商大賈往往以珍寶委棄深山大澤中，免罹喪亂，不可勝數。綿歷歲月，乃成變怪。今建州浦城縣之船山，一藏是也。山有赤人
    
    </summary>
    
      <category term="古籍" scheme="http://share18.cc/categories/%E5%8F%A4%E7%B1%8D/"/>
    
    
      <category term="文言文" scheme="http://share18.cc/tags/%E6%96%87%E8%A8%80%E6%96%87/"/>
    
      <category term="浦城" scheme="http://share18.cc/tags/%E6%B5%A6%E5%9F%8E/"/>
    
  </entry>
  
  <entry>
    <title>Python基础语法二：条件选择与循环语句</title>
    <link href="http://share18.cc/2016/04/27/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%9A%E4%BA%8C/"/>
    <id>http://share18.cc/2016/04/27/Python基础语法：二/</id>
    <published>2016-04-27T08:11:54.000Z</published>
    <updated>2016-04-28T15:04:41.829Z</updated>
    
    <content type="html">&lt;h3 id=&quot;条件选择&quot;&gt;&lt;a href=&quot;#条件选择&quot; class=&quot;headerlink&quot; title=&quot;条件选择&quot;&gt;&lt;/a&gt;条件选择&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;if语句&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;i = 1
if i &amp;gt; 0 :
    print &amp;apos;i大于0&amp;apos; 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;if else语句&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;i = 2
if i &amp;gt; 0 :
    print &amp;apos;i大于0&amp;apos;
else :
    print &amp;apos;i小于0&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;if elif语句&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;i = 3             
if i == 4 :       
    print &amp;apos;i等于4&amp;apos;  
elif i == 3 :     
    print &amp;apos;i等于3&amp;apos;  
elif i == 2 :     
    print &amp;apos;i等于2&amp;apos;  
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;循环语句&quot;&gt;&lt;a href=&quot;#循环语句&quot; class=&quot;headerlink&quot; title=&quot;循环语句&quot;&gt;&lt;/a&gt;循环语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;for…in&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;code1：
for test in &amp;apos;love&amp;apos; :      
    print &amp;apos;当前字母：&amp;apos; , test 

code2：
num = [&amp;apos;1&amp;apos;,&amp;apos;3&amp;apos;,&amp;apos;5&amp;apos;,&amp;apos;7&amp;apos;]         
for index in range(len(num)):   
    print &amp;apos;当前数字：&amp;apos; , num[index]  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：&lt;br&gt;当前字母： l&lt;br&gt;当前字母： o&lt;br&gt;当前字母： v&lt;br&gt;当前字母： e &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while语句&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;i = 3                   
while (i &amp;lt; 30):         
    i = i+1             
else:                   
    print &amp;apos;跳出循环时的数字：&amp;apos;,i     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：30&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while中的continue&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;i = 1            
while (i &amp;lt; 10):  
       i = i+1      
    if i%2 &amp;lt;&amp;gt; 0: 
        continue 
    else:        
        print i  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：2 4 6 8 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while中的break&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;i = 0                        
while (i &amp;lt; 5):               
    i += 1                   
    if i &amp;gt; 3:                
        print &amp;apos;大于3跳出，此时i=&amp;apos;,i 
        break                
    else:                    
        print &amp;apos;打印小于等于3的数：&amp;apos;,i 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：&lt;br&gt;打印小于等于3的数： 1&lt;br&gt;打印小于等于3的数： 2&lt;br&gt;打印小于等于3的数： 3&lt;br&gt;大于3跳出，此时i= 4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass语句&lt;br&gt;Python pass是空语句，是为了保持程序结构的完整性。&lt;br&gt;pass 不做任何事情，一般用做占位语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;for i in range(1,10):                              
if i == 5 :                                    
    pass                                       
    print&amp;apos;卧槽pass语句块下面是5吧，没事继续往下打印&amp;apos;             
print i                                        
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;卧槽pass语句块下面是5吧，没事继续往下打印&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;条件选择&quot;&gt;&lt;a href=&quot;#条件选择&quot; class=&quot;headerlink&quot; title=&quot;条件选择&quot;&gt;&lt;/a&gt;条件选择&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;if语句&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;i = 1
if i &amp;gt; 0 :
    print
    
    </summary>
    
      <category term="Python" scheme="http://share18.cc/categories/Python/"/>
    
    
      <category term="Python" scheme="http://share18.cc/tags/Python/"/>
    
      <category term="代码" scheme="http://share18.cc/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python基础语法一：基本函数</title>
    <link href="http://share18.cc/2016/04/22/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%9A%E4%B8%80/"/>
    <id>http://share18.cc/2016/04/22/Python基础语法：一/</id>
    <published>2016-04-22T08:11:54.000Z</published>
    <updated>2016-04-27T09:46:22.485Z</updated>
    
    <content type="html">&lt;h3 id=&quot;print-函数&quot;&gt;&lt;a href=&quot;#print-函数&quot; class=&quot;headerlink&quot; title=&quot;print()函数&quot;&gt;&lt;/a&gt;print()函数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;print(&amp;apos;Hello World&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;raw-input-函数&quot;&gt;&lt;a href=&quot;#raw-input-函数&quot; class=&quot;headerlink&quot; title=&quot;raw_input()函数&quot;&gt;&lt;/a&gt;raw_input()函数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;name=raw_input() #输入数据
print(&amp;apos;这是手动输入的数据：&amp;apos;+name)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;format-函数&quot;&gt;&lt;a href=&quot;#format-函数&quot; class=&quot;headerlink&quot; title=&quot;format()函数&quot;&gt;&lt;/a&gt;format()函数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# 5是占位,2是小数点后多少位，左右对齐取决于占位
print(format(12.345677,&amp;apos;5.2f&amp;apos;))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：12.34&lt;/p&gt;
&lt;h3 id=&quot;os-system-函数&quot;&gt;&lt;a href=&quot;#os-system-函数&quot; class=&quot;headerlink&quot; title=&quot;os.system()函数&quot;&gt;&lt;/a&gt;os.system()函数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;os.system(&amp;quot;pause&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行结果：在windows下让命令行窗口暂停&lt;/p&gt;
&lt;h3 id=&quot;类型转换&quot;&gt;&lt;a href=&quot;#类型转换&quot; class=&quot;headerlink&quot; title=&quot;类型转换&quot;&gt;&lt;/a&gt;类型转换&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;str = &amp;apos;1&amp;apos;
print(int(str)+1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：2&lt;/p&gt;
&lt;h3 id=&quot;id-函数&quot;&gt;&lt;a href=&quot;#id-函数&quot; class=&quot;headerlink&quot; title=&quot;id()函数&quot;&gt;&lt;/a&gt;id()函数&lt;/h3&gt;&lt;p&gt;说明：获取变量的内存id即地址&lt;/p&gt;
&lt;h3 id=&quot;range-函数&quot;&gt;&lt;a href=&quot;#range-函数&quot; class=&quot;headerlink&quot; title=&quot;range()函数&quot;&gt;&lt;/a&gt;range()函数&lt;/h3&gt;&lt;p&gt;range()是一个内置函数，它可以生成某个范围内的数字列表。&lt;br&gt;比如说range(1,6)就会生成[1,2,3,4,5]这样一个列表，而range(8)会生成[0,1,2,3,4,5,6,7]这样一个列表。&lt;/p&gt;
&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、变量指向的是内存地址&lt;/li&gt;
&lt;li&gt;2、变量在定义时不需要指定数据类型&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;print-函数&quot;&gt;&lt;a href=&quot;#print-函数&quot; class=&quot;headerlink&quot; title=&quot;print()函数&quot;&gt;&lt;/a&gt;print()函数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;print(&amp;apos;Hello World&amp;apos;)
&lt;/cod
    
    </summary>
    
      <category term="Python" scheme="http://share18.cc/categories/Python/"/>
    
    
      <category term="Python" scheme="http://share18.cc/tags/Python/"/>
    
      <category term="代码" scheme="http://share18.cc/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人博客如何进行文章发布</title>
    <link href="http://share18.cc/2016/04/21/Hexo%E5%8F%91%E5%B8%83/"/>
    <id>http://share18.cc/2016/04/21/Hexo发布/</id>
    <published>2016-04-21T09:29:32.000Z</published>
    <updated>2016-04-21T09:31:01.689Z</updated>
    
    <content type="html">&lt;h3 id=&quot;打开Git控制台程序&quot;&gt;&lt;a href=&quot;#打开Git控制台程序&quot; class=&quot;headerlink&quot; title=&quot;打开Git控制台程序&quot;&gt;&lt;/a&gt;打开Git控制台程序&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;D:\Program Files\Git\git-cmd.exe
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;进入Hexo工作目录&quot;&gt;&lt;a href=&quot;#进入Hexo工作目录&quot; class=&quot;headerlink&quot; title=&quot;进入Hexo工作目录&quot;&gt;&lt;/a&gt;进入Hexo工作目录&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;cd D:\StudyCode\CWoei.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;创建新文章&quot;&gt;&lt;a href=&quot;#创建新文章&quot; class=&quot;headerlink&quot; title=&quot;创建新文章&quot;&gt;&lt;/a&gt;创建新文章&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;hexo new post postName
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;为文章加入分类和标签&quot;&gt;&lt;a href=&quot;#为文章加入分类和标签&quot; class=&quot;headerlink&quot; title=&quot;为文章加入分类和标签&quot;&gt;&lt;/a&gt;为文章加入分类和标签&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;---
title: about
date: 2016-04-21 17:13:06
categories:
- Hexo
tags:
- GitHub
- 博客
---
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;编辑好以后使用命令生成静态文件&quot;&gt;&lt;a href=&quot;#编辑好以后使用命令生成静态文件&quot; class=&quot;headerlink&quot; title=&quot;编辑好以后使用命令生成静态文件&quot;&gt;&lt;/a&gt;编辑好以后使用命令生成静态文件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;hexo generate
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;部署到Git&quot;&gt;&lt;a href=&quot;#部署到Git&quot; class=&quot;headerlink&quot; title=&quot;部署到Git&quot;&gt;&lt;/a&gt;部署到Git&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;hexo deploy
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;打开Git控制台程序&quot;&gt;&lt;a href=&quot;#打开Git控制台程序&quot; class=&quot;headerlink&quot; title=&quot;打开Git控制台程序&quot;&gt;&lt;/a&gt;打开Git控制台程序&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;D:\Program Files\Git\git-cmd.e
    
    </summary>
    
      <category term="Hexo" scheme="http://share18.cc/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://share18.cc/tags/Hexo/"/>
    
      <category term="博客" scheme="http://share18.cc/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
